name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & push the Docker image
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        TEST_ADMIN_ACCOUNT_EMAIL: ${{ secrets.TEST_ADMIN_ACCOUNT_EMAIL }}
        TEST_ADMIN_ACCOUNT_PASSWORD: ${{ secrets.TEST_ADMIN_ACCOUNT_PASSWORD }}
        TEST_EMPLOYEE_ACCOUNT_EMAIL: ${{ secrets.TEST_EMPLOYEE_ACCOUNT_EMAIL }}
        TEST_EMPLOYEE_ACCOUNT_PASSWORD: ${{ secrets.TEST_EMPLOYEE_ACCOUNT_PASSWORD }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: employee_demo
        IMAGE_TAG: team4-rras-api
      run: |
        docker build --build-arg DB_PASSWORD=${DB_PASSWORD} --build-arg DB_USERNAME=${DB_USERNAME} --build-arg DB_HOST=${DB_HOST} --build-arg DB_NAME=${DB_NAME} --build-arg JWT_SECRET=${JWT_SECRET} --build-arg TEST_ADMIN_ACCOUNT_EMAIL=${TEST_ADMIN_ACCOUNT_EMAIL} --build-arg TEST_ADMIN_ACCOUNT_PASSWORD=${TEST_ADMIN_ACCOUNT_PASSWORD} --build-arg TEST_EMPLOYEE_ACCOUNT_EMAIL=${TEST_EMPLOYEE_ACCOUNT_EMAIL} --build-arg TEST_EMPLOYEE_ACCOUNT_PASSWORD=${TEST_EMPLOYEE_ACCOUNT_PASSWORD} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
